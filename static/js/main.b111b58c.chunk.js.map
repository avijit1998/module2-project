{"version":3,"sources":["ListContacts.js","App.js","index.js","registerServiceWorker.js"],"names":["ListContacts","props","useState","query","setQuery","showContacts","contacts","filter","c","name","toLowerCase","includes","className","type","placeholder","value","onChange","event","target","length","onClick","map","contact","key","id","style","backgroundImage","avatarURL","handle","onDeleteContact","App","state","removeContact","setState","currentState","this","Component","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"4NAiEeA,MA9Df,SAAsBC,GAAQ,IAAD,EACDC,mBAAS,IADR,mBACpBC,EADoB,KACbC,EADa,KAGrBC,EACM,KAAVF,EACIF,EAAMK,SACNL,EAAMK,SAASC,QAAO,SAACC,GAAD,OACpBA,EAAEC,KAAKC,cAAcC,SAASR,EAAMO,kBAG5C,OACE,yBAAKE,UAAU,iBACb,yBAAKA,UAAU,qBACb,2BACEA,UAAU,kBACVC,KAAK,OACLC,YAAY,kBACZC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAWb,EAASa,EAAMC,OAAOH,WAI9CV,EAAac,SAAWlB,EAAMK,SAASa,QACtC,yBAAKP,UAAU,oBACb,6CACeP,EAAac,OAD5B,OACwClB,EAAMK,SAASa,QAEvD,4BAAQC,QAAS,kBAAMhB,EAAS,MAAhC,aAIJ,wBAAIQ,UAAU,gBACXP,EAAagB,KAAI,SAACC,GAAD,OAChB,wBAAIC,IAAKD,EAAQE,GAAIZ,UAAU,qBAC7B,yBACEA,UAAU,iBACVa,MAAO,CACLC,gBAAgB,OAAD,OAASJ,EAAQK,UAAjB,QAGnB,yBAAKf,UAAU,mBACb,2BAAIU,EAAQb,MACZ,2BAAIa,EAAQM,SAEd,4BACER,QAAS,kBAAMnB,EAAM4B,gBAAgBP,IACrCV,UAAU,kBAFZ,iBCAGkB,E,4MA3CbC,MAAQ,CACNzB,SAAU,CACR,CACEkB,GAAI,QACJf,KAAM,gBACNmB,OAAQ,gBACRD,UAAW,mCAEb,CACEH,GAAI,UACJf,KAAM,mBACNmB,OAAQ,kBACRD,UAAW,qCAEb,CACEH,GAAI,QACJf,KAAM,iBACNmB,OAAQ,gBACRD,UAAW,qC,EAKjBK,cAAgB,SAACV,GACf,EAAKW,UAAS,SAACC,GAAD,MAAmB,CAC/B5B,SAAU4B,EAAa5B,SAASC,QAAO,SAACC,GACtC,OAAOA,EAAEgB,KAAOF,EAAQE,W,uDAM5B,OACE,6BACE,kBAAC,EAAD,CACElB,SAAU6B,KAAKJ,MAAMzB,SACrBuB,gBAAiBM,KAAKH,qB,GArCdI,a,MCGlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SCKF,kBAAmBC,WAC9DC,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMC,mBAAN,sBACXJ,UAAUK,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpB,QACfU,UAAUK,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,U","file":"static/js/main.b111b58c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction ListContacts(props) {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const showContacts =\r\n    query === \"\"\r\n      ? props.contacts\r\n      : props.contacts.filter((c) =>\r\n          c.name.toLowerCase().includes(query.toLowerCase())\r\n        );\r\n\r\n  return (\r\n    <div className=\"list-contacts\">\r\n      <div className=\"list-contacts-top\">\r\n        <input\r\n          className=\"search-contacts\"\r\n          type=\"text\"\r\n          placeholder=\"Search Contacts\"\r\n          value={query}\r\n          onChange={(event) => setQuery(event.target.value)}\r\n        />\r\n      </div>\r\n\r\n      {showContacts.length !== props.contacts.length && (\r\n        <div className=\"showing-contacts\">\r\n          <span>\r\n            Now showing {showContacts.length} of {props.contacts.length}\r\n          </span>\r\n          <button onClick={() => setQuery(\"\")}>Show all</button>\r\n        </div>\r\n      )}\r\n\r\n      <ol className=\"contact-list\">\r\n        {showContacts.map((contact) => (\r\n          <li key={contact.id} className=\"contact-list-item\">\r\n            <div\r\n              className=\"contact-avatar\"\r\n              style={{\r\n                backgroundImage: `url(${contact.avatarURL})`,\r\n              }}\r\n            ></div>\r\n            <div className=\"contact-details\">\r\n              <p>{contact.name}</p>\r\n              <p>{contact.handle}</p>\r\n            </div>\r\n            <button\r\n              onClick={() => props.onDeleteContact(contact)}\r\n              className=\"contact-remove\"\r\n            >\r\n              Remove\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n\r\nListContacts.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ListContacts;\r\n","import React, { Component } from \"react\";\r\nimport ListContacts from \"./ListContacts\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [\r\n      {\r\n        id: \"karen\",\r\n        name: \"Karen Isgrigg\",\r\n        handle: \"karen_isgrigg\",\r\n        avatarURL: \"http://localhost:5001/karen.jpg\",\r\n      },\r\n      {\r\n        id: \"richard\",\r\n        name: \"Richard Kalehoff\",\r\n        handle: \"richardkalehoff\",\r\n        avatarURL: \"http://localhost:5001/richard.jpg\",\r\n      },\r\n      {\r\n        id: \"tyler\",\r\n        name: \"Tyler McGinnis\",\r\n        handle: \"tylermcginnis\",\r\n        avatarURL: \"http://localhost:5001/tyler.jpg\",\r\n      },\r\n    ],\r\n  };\r\n\r\n  removeContact = (contact) => {\r\n    this.setState((currentState) => ({\r\n      contacts: currentState.contacts.filter((c) => {\r\n        return c.id !== contact.id;\r\n      }),\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ListContacts\r\n          contacts={this.state.contacts}\r\n          onDeleteContact={this.removeContact}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport './index.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}