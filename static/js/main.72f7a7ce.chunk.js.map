{"version":3,"sources":["ListContacts.js","utils/ContactsAPI.js","ImageInput.js","CreateContact.js","App.js","index.js","registerServiceWorker.js"],"names":["ListContacts","props","useState","query","setQuery","showContacts","contacts","filter","c","name","toLowerCase","includes","className","type","placeholder","value","onChange","event","target","to","length","onClick","map","contact","key","id","style","backgroundImage","avatarURL","handle","onDeleteContact","api","process","REACT_APP_CONTACTS_API_URL","token","localStorage","Math","random","toString","substr","headers","remove","fetch","method","then","res","json","data","create","body","JSON","stringify","readFileAsDataURL","file","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","resizeImage","imageURL","canvas","maxHeight","image","Image","context","getContext","height","width","clearRect","drawImage","toDataURL","src","ImageInput","state","handleFileChange","files","match","originalURL","url","setState","handleFormReset","this","document","createElement","fileInput","form","addEventListener","removeEventListener","position","backgroundRepeat","backgroundPosition","backgroundSize","ref","node","top","left","opacity","React","Component","CreateContact","handleSubmit","e","preventDefault","values","serializeForm","hash","onCreateContact","onSubmit","App","removeContact","currentState","contactsAPI","createContact","concat","exact","path","render","on","history","push","ReactDOM","getElementById","navigator","window","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"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","file":"static/js/main.72f7a7ce.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction ListContacts(props) {\r\n  const [query, setQuery] = useState(\"\");\r\n\r\n  const showContacts =\r\n    query === \"\"\r\n      ? props.contacts\r\n      : props.contacts.filter((c) =>\r\n          c.name.toLowerCase().includes(query.toLowerCase())\r\n        );\r\n\r\n  return (\r\n    <div className=\"list-contacts\">\r\n      <div className=\"list-contacts-top\">\r\n        <input\r\n          className=\"search-contacts\"\r\n          type=\"text\"\r\n          placeholder=\"Search Contacts\"\r\n          value={query}\r\n          onChange={(event) => setQuery(event.target.value)}\r\n        />\r\n        <Link to=\"/create\" className=\"add-contact\">\r\n          Add Contact\r\n        </Link>\r\n      </div>\r\n\r\n      {showContacts.length !== props.contacts.length && (\r\n        <div className=\"showing-contacts\">\r\n          <span>\r\n            Now showing {showContacts.length} of {props.contacts.length}\r\n          </span>\r\n          <button onClick={() => setQuery(\"\")}>Show all</button>\r\n        </div>\r\n      )}\r\n\r\n      <ol className=\"contact-list\">\r\n        {showContacts.map((contact) => (\r\n          <li key={contact.id} className=\"contact-list-item\">\r\n            <div\r\n              className=\"contact-avatar\"\r\n              style={{\r\n                backgroundImage: `url(${contact.avatarURL})`,\r\n              }}\r\n            ></div>\r\n            <div className=\"contact-details\">\r\n              <p>{contact.name}</p>\r\n              <p>{contact.handle}</p>\r\n            </div>\r\n            <button\r\n              onClick={() => props.onDeleteContact(contact)}\r\n              className=\"contact-remove\"\r\n            >\r\n              Remove\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n\r\nListContacts.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ListContacts;\r\n","const api = process.env.REACT_APP_CONTACTS_API_URL || 'http://localhost:5001'\r\n\r\nlet token = localStorage.token\r\n\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/contacts`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.contacts)\r\n\r\nexport const remove = (contact) =>\r\n  fetch(`${api}/contacts/${contact.id}`, { method: 'DELETE', headers })\r\n    .then(res => res.json())\r\n    .then(data => data.contact)\r\n\r\nexport const create = (body) =>\r\n  fetch(`${api}/contacts`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(body)\r\n  }).then(res => res.json())\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst readFileAsDataURL = (file) =>\r\n  new Promise(resolve => {\r\n    const reader = new FileReader()\r\n\r\n    reader.onload = (event) => {\r\n      resolve(event.target.result)\r\n    }\r\n\r\n    reader.readAsDataURL(file)\r\n  })\r\n\r\nconst resizeImage = (imageURL, canvas, maxHeight) =>\r\n  new Promise(resolve => {\r\n    const image = new Image()\r\n\r\n    image.onload = () => {\r\n      const context = canvas.getContext('2d')\r\n\r\n      if (image.height > maxHeight) {\r\n        image.width *= maxHeight / image.height\r\n        image.height = maxHeight\r\n      }\r\n\r\n      context.clearRect(0, 0, canvas.width, canvas.height)\r\n      canvas.width = image.width\r\n      canvas.height = image.height\r\n\r\n      context.drawImage(image, 0, 0, image.width, image.height)\r\n\r\n      resolve(canvas.toDataURL('image/jpeg'))\r\n    }\r\n\r\n    image.src = imageURL\r\n  })\r\n\r\n/**\r\n * A custom <input> that dynamically reads and resizes image files before\r\n * submitting them to the server as data URLs. Also, shows a preview of the image.\r\n */\r\nclass ImageInput extends React.Component {\r\n  static propTypes = {\r\n    className: PropTypes.string,\r\n    name: PropTypes.string,\r\n    maxHeight: PropTypes.number\r\n  }\r\n\r\n  state = {\r\n    value: ''\r\n  }\r\n\r\n  handleFileChange = (event) => {\r\n    const file = event.target.files[0]\r\n\r\n    if (file && file.type.match(/^image\\//)) {\r\n      readFileAsDataURL(file).then(originalURL => {\r\n        resizeImage(originalURL, this.canvas, this.props.maxHeight).then(url => {\r\n          this.setState({ value: url })\r\n        })\r\n      })\r\n    } else {\r\n      this.setState({ value: '' })\r\n    }\r\n  }\r\n\r\n  handleFormReset = () => {\r\n    this.setState({ value: '' })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.canvas = document.createElement('canvas')\r\n    this.fileInput.form.addEventListener('reset', this.handleFormReset)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.fileInput.form.removeEventListener('reset', this.handleFormReset)\r\n  }\r\n\r\n  render() {\r\n    const { className, name } = this.props\r\n    const { value } = this.state\r\n\r\n    const style = {\r\n      position: 'relative'\r\n    }\r\n\r\n    if (value) {\r\n      style.backgroundImage = `url(\"${value}\")`\r\n      style.backgroundRepeat = 'no-repeat'\r\n      style.backgroundPosition = 'center'\r\n      style.backgroundSize = 'cover'\r\n    }\r\n\r\n    return (\r\n      <div className={className} style={style}>\r\n        <input type=\"hidden\" name={name} value={value} />\r\n        <input\r\n          ref={node => this.fileInput = node}\r\n          type=\"file\"\r\n          onChange={this.handleFileChange}\r\n          style={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            width: '100%',\r\n            height: '100%',\r\n            opacity: 0\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ImageInput\r\n","import React, { Component } from \"react\";\r\nimport ImageInput from \"./ImageInput\";\r\nimport { Link } from \"react-router-dom\";\r\nimport serializeForm from \"form-serialize\";\r\n\r\nclass CreateContact extends Component {\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const values = serializeForm(e.target, { hash: true });\r\n\r\n    if (this.props.onCreateContact) {\r\n      this.props.onCreateContact(values);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Link to=\"/\" className=\"close-create-contact\">\r\n          Close\r\n        </Link>\r\n        <form onSubmit={this.handleSubmit} className=\"create-contact-form\">\r\n          <ImageInput\r\n            className=\"create-contact-avatar-input\"\r\n            name=\"avatarURL\"\r\n            maxHeight={64}\r\n          />\r\n          <div className=\"create-contact-details\">\r\n            <input type=\"text\" name=\"name\" placeholder=\"Name\" />\r\n            <input type=\"text\" name=\"handle\" placeholder=\"Twitter Handle\" />\r\n            <button>Add Contact</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateContact;\r\n","import React, { Component } from \"react\";\r\nimport ListContacts from \"./ListContacts\";\r\nimport * as contactsAPI from \"./utils/ContactsAPI\";\r\nimport CreateContact from \"./CreateContact\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    contacts: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    contactsAPI.getAll().then((contacts) => {\r\n      this.setState(() => ({\r\n        contacts: contacts,\r\n      }));\r\n    });\r\n  }\r\n\r\n  removeContact = (contact) => {\r\n    this.setState((currentState) => ({\r\n      contacts: currentState.contacts.filter((c) => {\r\n        return c.id !== contact.id;\r\n      }),\r\n    }));\r\n\r\n    contactsAPI.remove(contact);\r\n  };\r\n\r\n  createContact = (contact) => {\r\n    contactsAPI.create(contact).then((contact) => {\r\n      this.setState((currentState) => ({\r\n        contacts: currentState.contacts.concat([contact]),\r\n      }));\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Route\r\n          exact\r\n          path=\"/\"\r\n          render={() => (\r\n            <ListContacts\r\n              contacts={this.state.contacts}\r\n              onDeleteContact={this.removeContact}\r\n              on\r\n            />\r\n          )}\r\n        />\r\n        <Route\r\n          path=\"/create\"\r\n          render={({ history }) => (\r\n            <CreateContact\r\n              onCreateContact={(contact) => {\r\n                this.createContact(contact);\r\n                history.push(\"/\");\r\n              }}\r\n            />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\nimport \"./index.css\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\nregisterServiceWorker();\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n          registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n              if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                  // At this point, the old content will have been purged and\r\n                  // the fresh content will have been added to the cache.\r\n                  // It's the perfect time to display a \"New content is\r\n                  // available; please refresh.\" message in your web app.\r\n                  console.log('New content is available; please refresh.');\r\n                } else {\r\n                  // At this point, everything has been precached.\r\n                  // It's the perfect time to display a\r\n                  // \"Content is cached for offline use.\" message.\r\n                  console.log('Content is cached for offline use.');\r\n                }\r\n              }\r\n            };\r\n          };\r\n        })\r\n        .catch(error => {\r\n          console.error('Error during service worker registration:', error);\r\n        });\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":""}